% Include the toolboxes
addpath(genpath('.'));
% Load the cortical toolbox
loadload
% Audio file test
audioFile = 'soundfiles/Hp-pizz-bartok-D#7-ff.wav';
% Read the corresponding signal
[sig, fs] = audioread(audioFile);
% First perform audio descriptor extraction
descriptors = processDescriptor(audioFile);
disp(descriptors);
% Parameters to compute the FFT
resampleTo = 22050;
% First resample the signal (similar to ircamDescriptor)
if (fs ~= resampleTo)
    % Be a bit clever and limit the amount of ops
    gcdVal = gcd(fs, resampleTo);
    % Resample the signal
    sig = resample(sig, resampleTo / gcdVal, fs / gcdVal);
    fs = resampleTo;
end
winSize = round(0.060000 * fs);
hopSize = round(0.010000 * fs);
% Finally compute the FFT
% fftMat = spectrogram(sig, blackman(winSize), (winSize - hopSize));
% % Check that the number of windows are consistent
% if (size(fftMat, 2) ~= size(descriptors.SpectralCentroid.value, 1))
%     error('Incoherent number of windows');
% end
% % Final number of time points
% nWin = size(fftMat, 2);
% % Process STRF (cochlear filter output) representation of sound
% % filt: filter type ('p' = Powen's IIR, 'p_o' = steeper group delay)
% filt = 'p';         
% % ch_sel: channel selection
% ch_sel = -1;
% % Call the cochlear filter function
% y1 = wav2y1(sig, ch_sel, filt);
% % y1 : the filter bank output, Lx-by-M 
% y1 = y1';
% % Find common divisor with number of windows
% gcdVal = gcd(size(y1, 2), nWin);
% % Final matrix of cochlear data
% finalY1 = zeros(size(y1, 1), nWin);
% % Resample to the number of time points
% for t = 1:size(y1, 1)
%     fprintf('Resampling cochlear bank %d.\n', t);
%     finalY1(t, :) = resample(y1(t, :), nWin / gcdVal, size(y1, 2) / gcdVal);
% end
% Now finally output all representations
for t = 1:size(fftMat, 2)
    if (sum(abs(fftMat(:, t))) < 0.1)
        fprintf('Skipping window %d (Empty FFT)\n', t);
    end
end