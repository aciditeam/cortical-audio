function [yh, para1, rv, sv, HH] = cor2aud(fname, cr, para2, DISP)
% COR2AUD auditory reconstruction from cortical representation.
%	yh = cor2aud(fname);
%	[yh, para1] = cor2aud(fname);
%	[yh, para1, rv, sv] = cor2aud(fname, cr, para2, DISP);
%	fname	: cortical file name (.cor)
%	cr		: 4-D cortical representation (generated by aud2cor)
%	para2 = [NORM, FOUTT, FOUTX, BP]
%	NORM	: (optional) normalization style. 
%		  0=flat, 1=full, .x=partial
%	FOUTT(X): (optional) overlapped output, within [0, 1]
%	BP		: pure bandpass indicator
%	DISP	: display (level limit) (see AUD2COR)
%	yh		: reconstructed auditory spectrogram, N-by-M, where
%		  N = # of samples, M = # of channels
%	para1 = [paras, FULLT, FULLX], see AUD2COR
%	rv, sv	: rate (scale) vector
%
%	COR2AUD reconstructs auditory spectrogram from spatiotemporal
%	cortical representations.
%	See also: AUD2COR

% Auther: Powen Ru (powen@isr.umd.edu), NSL, UMD
% v1.00: 01-Jun-97
% v1.01: 20-Aug-97, add non-truncation M(4), N(4), FULLOUT
% v1.02: 28-Aug-97, include perfect reconstruction
% v1.03: add causal option
% v1.04: 12-Apr-98, remove non_causal option

% Revision: Taishih Chi (tschi@isr.umd.edu), NSL, UMD
% v1.10: 13-May-99, add cr, 4 dimensional representation
% v1.20: 14-Oct-04, add DC normalization for perfect reconstruction

CR = ~(nargin < 2);
if nargin < 3, para2 = [.9, 0, 0, 0]; end;
if length(para2) < 1, NORM = .9; else, NORM = para2(1); end;
if length(para2) < 2, FOUTT = 0; else, FOUTT = para2(2); end;
if length(para2) < 3, FOUTX = FOUTT; else, FOUTX = para2(3); end;
if length(para2) < 4, BP = 0; else, BP = para2(4); end;
if nargin < 4, DISP	= 0; end;

% read file
fcor	= fopen(fname);
[paras, K1, K2, rv, sv, N, M, FULLT, FULLX] = corheadr(fcor);
para1 = [paras(:)', FULLT, FULLX];
STF	= 1000 / para1(1);
SRF	= 24;

M(4) = floor(M(1)/2*FULLX);	% dM
N(4) = floor(N(1)/2*FULLT);	% dN
HH   = 0;
Z_cum = 0;

% loop
t0 = clock;
for rdx = 1:K1,
	% rate filtering
	fc_rt = rv(rdx);
	HR = gen_cort(fc_rt, N(2), STF, [rdx+BP K1+BP*2]);

	for sgn = [1 -1],
	
		% rate filtering modification
		if sgn > 0,
			HR = conj([HR; zeros(N(2), 1)]);
		else,
			HR = [HR(1); conj(flipud(HR(2:N(3))))];
			%HR = [0; conj(flipud(HR(2:N(3))))];
			HR(N(2)+1) = abs(HR(N(2)+2));
		end;

		for sdx = 1:K2,
			
			HS = gen_corf(sv(sdx), M(2), SRF, [sdx+BP K2+BP*2]);
	
			% load file
			if CR
				z = squeeze(cr(sdx, rdx+(sgn==1)*K1, :, :));
			else
				z = corcplxr(fcor, N(1)+2*N(4), M(1)+2*M(4));
			end

			if DISP,
				image(cplx_col(z, DISP)');
				axis xy;
				if FULLT | FULLX, hold on;
					plot(...
					  [0 N(1)+1 N(1)+1 0 0]+N(4), ...
					  [0 0 M(1)+1 M(1)+1 0]+M(4), ...
					  'k--');
				hold off; end;
				R1 = sprintf(['Scale = %4.2f cyc/oct, ' ...
					'Rate = %4.1f Hz, (Max. = %3.1e)'], ...
					sv(sdx), sgn*rv(rdx), ...
					max(max(abs(z))));
					text('position', [N(1)/2+N(4), ... 
						.9*M(1)+2*M(4)], 'str', R1, ...
						'ho', 'ce', 'fontwe', 'bold');
					drawnow;
			end;

			% 2-D FFT and cumulation
			[Z_cum, HH] = corfftc(z, Z_cum, N, M, HR, HS, HH);

		end;
	end;
	time_est(rdx, K1, 1, t0);

end;

fclose(fcor);

% normalization
HH(:, 1) = HH(:, 1)*2;		% normalization for DC
yh = cornorm(Z_cum, HH, N, M, NORM, FOUTT, FOUTX);

% fix auditory spectrum
%yh = aud_fix(yh);

%%%%%%%%%%%%  End of Backward Program %%%%%%%%%%%%%%
