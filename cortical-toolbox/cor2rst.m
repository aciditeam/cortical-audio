function [rst, rsf, rv, sv] = cor2rst(fname)
% COR2RST Rate-scale matrix of a cortical representation 
%	[rst, rsf, rv, sv] = cor2rst(fname);
%	fname   : input cortical representation file
%	rst : rate-scale-time matrice, S-by-R-by-N, where  N = # of samples,
%		S = # of scale, R = # of rate ([upward, downward])
%	rsf : rate-scale-freq. matrice, S-by-R-by-M, where  M = # of channels
%		S = # of scale, R = # of rate ([upward, downward])
%	rv  : rate vector in Hz, e.g., 2.^(1:.5:5).
%	sv  : scale vector in cyc/oct, e.g., 2.^(-2:.5:3).
%
%	COR2RST generate rate-scale matrice according to the file FNAME 
%	which was generated by AUD2COR. RST, RSF can be read by RST_VIEW.
%	See also: RST_VIEW, AUD2COR

% Auther: Powen Ru (powen@isr.umd.edu), NSL, UMD
% v1.00: 01-Jun-97
% v1.01: 19-Aug-97, new variables: FULL, dN, ..
% v1.02: 28-Aug-97, removed 2-D mean Yn, Ym
% v1.03: 30-Sep-97, add causal option
% v1.04: 12-Apr-98, remove non-causal option

% Revision: Taishih Chi (tschi@isr.umd.edu), NSL, UMD
% v1.10: 14-Dec-98, make [rst, rsf] 3 dimensional representation

% read info 
fcor = fopen(fname);
[paras, K1, K2, rv, sv, N, M, FULLT, FULLX] = corheadr(fcor);
dr = mean(diff(log2(rv)));
ds = mean(diff(log2(sv)));

% rate-scale loop
Ktmp = 2*K1;
rst = zeros(K2, Ktmp, N(1));
rsf = zeros(K2, Ktmp, M(1));
t0 = clock;

% dimensions
dM = floor(M(1)/2*FULLX);
dN = floor(N(1)/2*FULLT);
N(2) = N(1) + 2 * dN;
M(2) = M(1) + 2 * dM;

for rdx = 1:K1,
	r_gain = 1 - exp(-(rdx-.9)*dr);

	for sgn = [1 -1],

		for sdx = 1:K2,
			s_gain = 1 - exp(-(sdx)*ds);
			%rs_gain = (r_gain * s_gain);
			rs_gain = 1;
	
			% read data
			z = corcplxr(fcor, N(2), M(2));
			z = z((1:N(1))+dN, (1:M(1))+dM);

			% collasp freq. and time axis

			rst(sdx, rdx+(sgn==1)*K1, :) = mean((abs(z))')*rs_gain;
			rsf(sdx, rdx+(sgn==1)*K1, :) = mean(abs(z))*rs_gain;

		end;
		
	end;
	time_est(rdx, K1, 1, t0);

end;

fclose(fcor);
